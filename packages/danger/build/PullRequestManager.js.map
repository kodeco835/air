{"version":3,"file":"PullRequestManager.js","sourceRoot":"","sources":["../src/PullRequestManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Octokit } from '@octokit/rest';\nimport { GitHubPRDSL } from 'danger/distribution/dsl/GitHubDSL';\n\nimport { GithubApiWrapper } from './GithubApiWrapper';\nimport { getPackageChangelogRelativePath } from './Utils';\n\nexport enum ChangelogEntryType {\n  BUG_FIXES = 0,\n  NEW_FEATURES = 1,\n  BREAKING_CHANGES = 2,\n}\n\nexport const DEFAULT_ENTRY_TYPE = ChangelogEntryType.BUG_FIXES;\n\nexport type ChangelogEntry = {\n  type: ChangelogEntryType;\n  message: string;\n};\n\nexport const DEFAULT_CHANGELOG_ENTRY_KEY = 'default' as const;\n\nexport type ChangelogEntries = {\n  [DEFAULT_CHANGELOG_ENTRY_KEY]: ChangelogEntry;\n  [key: string]: ChangelogEntry;\n};\n\nexport type PullRequest = GitHubPRDSL | Octokit.PullsListResponseItem;\n\ntype ParsingResult = {\n  packageName: string | typeof DEFAULT_CHANGELOG_ENTRY_KEY;\n  type: ChangelogEntryType;\n};\n\nconst dangerMessage = `Add missing changelog`;\nconst dangerTags = `[danger][bot]`;\n\nexport class PullRequestManager {\n  constructor(private pullRequest: PullRequest, private githubApi: GithubApiWrapper) {}\n\n  /**\n   * Gets suggested changelog entries from PR provided in the constructor.\n   *\n   * If PR doesn't contain `# Changelog` section, this method returns:\n   * {\n   *   [DEFAULT_CHANGELOG_ENTRY_KEY]: <title of this pr without tags>\n   * }\n   * Otherwise, it tries to parse PR's body.\n   */\n  parseChangelogSuggestionFromDescription(): ChangelogEntries {\n    const changelogEntries = {\n      [DEFAULT_CHANGELOG_ENTRY_KEY]: {\n        type: DEFAULT_ENTRY_TYPE,\n        message: this.pullRequest.title.replace(/\\[.*\\]/, '').trim(),\n      },\n    };\n\n    const parseLine: (line: string) => void = line => {\n      const parsingResult = this.parseTagsFromLine(line);\n      changelogEntries[parsingResult.packageName] = {\n        type: parsingResult.type,\n        message: line.replace(/\\[.*\\]/, '').trim(),\n      };\n    };\n\n    parseLine(this.pullRequest.title);\n\n    const changelogSection = this.pullRequest.body.match(/#\\schangelog(([^#]*?)\\s?)*/i)?.[0];\n    if (changelogSection) {\n      changelogSection\n        .split('\\n')\n        .slice(1)\n        .map(line => line.replace(/^\\s*-/, '').trim())\n        .filter(line => line.length > 0)\n        .forEach(parseLine);\n    }\n\n    return changelogEntries;\n  }\n\n  async createOrUpdatePRAsync(\n    missingEntries: { packageName: string; content: string }[]\n  ): Promise<PullRequest | null> {\n    const dangerHeadRef = `@danger/add-missing-changelog-to-${this.pullRequest.number}`;\n    const dangerBaseRef = this.pullRequest.head.ref;\n\n    const fileMap = missingEntries.reduce(\n      (prev, current) => ({\n        ...prev,\n        [getPackageChangelogRelativePath(current.packageName)]: current.content,\n      }),\n      {}\n    );\n\n    await this.githubApi.createOrUpdateBranchFromFileMap(fileMap, {\n      baseBranchName: dangerBaseRef,\n      branchName: dangerHeadRef,\n      message: `${dangerTags} ${dangerMessage}`,\n    });\n\n    const prs = await this.githubApi.getOpenPRs({\n      fromBranch: dangerHeadRef,\n      toBranch: dangerBaseRef,\n    });\n\n    if (prs.length > 1) {\n      warn(\"Couldn't find the correct pull request. Too many open ones.\");\n      return null;\n    }\n\n    if (prs.length === 1) {\n      return prs[0];\n    }\n\n    return this.githubApi.openPR({\n      fromBranch: dangerHeadRef,\n      toBranch: dangerBaseRef,\n      title: `${dangerTags} ${dangerMessage} to #${this.pullRequest.number}`,\n      body: `${dangerMessage} to #${this.pullRequest.number}`,\n    });\n  }\n\n  private parseTagsFromLine(line: string): ParsingResult {\n    const result: ParsingResult = {\n      type: DEFAULT_ENTRY_TYPE,\n      packageName: DEFAULT_CHANGELOG_ENTRY_KEY,\n    };\n\n    const tags = line.match(/\\[[^\\]]*\\]/g)?.map(tag => tag.slice(1, tag.length - 1));\n    if (!tags) {\n      return result;\n    }\n\n    for (const tag of tags) {\n      const entryType = parseEntryType(tag);\n      if (entryType !== null) {\n        result.type = Math.max(result.type, entryType);\n      } else if (isExpoPackage(tag)) {\n        result.packageName = tag.trim();\n      }\n    }\n\n    return result;\n  }\n}\n\nexport function createPullRequestManager(api: Octokit, pr: PullRequest): PullRequestManager {\n  return new PullRequestManager(\n    pr,\n    new GithubApiWrapper(api, pr.base.user.login, pr.base.repo.name)\n  );\n}\n\nfunction parseEntryType(tag: string): ChangelogEntryType | null {\n  switch (true) {\n    case /\\b(break(ing)?)\\b/i.test(tag):\n      return ChangelogEntryType.BREAKING_CHANGES;\n    case /\\b(feat|features?)\\b/i.test(tag):\n      return ChangelogEntryType.NEW_FEATURES;\n    case /\\b(bug|fix|bugfix|bug-fix)\\b/i.test(tag):\n      return ChangelogEntryType.BUG_FIXES;\n  }\n  return null;\n}\n\nfunction isExpoPackage(name: string): boolean {\n  const prefixes = ['expo', 'unimodules'];\n  return prefixes.some(prefix => name.startsWith(prefix));\n}\n"]}