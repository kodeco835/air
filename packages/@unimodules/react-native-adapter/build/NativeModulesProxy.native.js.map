{"version":3,"file":"NativeModulesProxy.native.js","sourceRoot":"","sources":["../src/NativeModulesProxy.native.ts"],"names":[],"mappings":"AAAA,aAAa;AACb,OAAO,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAIlE,MAAM,WAAW,GAAG,aAAa,CAAC,oBAAoB,CAAC;AACvD,MAAM,mBAAmB,GAAG,kBAAkB,CAAC;AAC/C,MAAM,kBAAkB,GAAG,iBAAiB,CAAC;AAQ7C,SAAS,kBAAkB,CAAC,UAAkB,EAAE,UAAsB,EAAE,IAAe;IACrF,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC;IACxD,IAAI,cAAc,KAAK,IAAI,CAAC,MAAM,EAAE;QAClC,MAAM,IAAI,KAAK,CACb,iBAAiB,UAAU,IAAI,UAAU,YAAY,cAAc,IACjE,cAAc,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WACtC,iBAAiB,IAAI,CAAC,MAAM,EAAE,CAC/B,CAAC;KACH;AACH,CAAC;AAED,MAAM,kBAAkB,GAAgD,EAAE,CAAC;AAE3E,IAAI,WAAW,EAAE;IACf,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAChE,MAAM,WAAW,GAAG,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxD,kBAAkB,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC,mBAAmB,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACpF,WAAW,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,UAAsB,EAAE,EAAE;YAC7E,kBAAkB,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW;gBAC3D,CAAC,CAAC,KAAK,EAAE,GAAG,IAAe,EAAgB,EAAE;oBACzC,kBAAkB,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;oBACjD,OAAO,MAAM,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC7D,CAAC;gBACH,CAAC,CAAC,KAAK,EAAE,GAAG,IAAe,EAAgB,EAAE;oBACzC,kBAAkB,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;oBACjD,OAAO,MAAM,WAAW,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACxE,CAAC,CAAC;QACR,CAAC,CAAC,CAAC;QAEH,+EAA+E;QAC/E,kFAAkF;QAClF,EAAE;QACF,wEAAwE;QACxE,gDAAgD;QAChD,kBAAkB,CAAC,UAAU,CAAC,CAAC,WAAW,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CACvD,aAAa,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC;QAClF,kBAAkB,CAAC,UAAU,CAAC,CAAC,eAAe,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CAC3D,aAAa,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;CACJ;KAAM;IACL,OAAO,CAAC,IAAI,CACV,+JAA+J,CAChK,CAAC;CACH;AAED,eAAe,kBAAkB,CAAC","sourcesContent":["// @ts-ignore\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\n\nimport { ProxyNativeModule } from './NativeModulesProxy.types';\n\nconst NativeProxy = NativeModules.NativeUnimoduleProxy;\nconst modulesConstantsKey = 'modulesConstants';\nconst exportedMethodsKey = 'exportedMethods';\n\ntype MethodInfo = {\n  name: string;\n  key: any;\n  argumentsCount: number;\n};\n\nfunction validateMethodCall(moduleName: string, methodInfo: MethodInfo, args: unknown[]) {\n  const { name: methodName, argumentsCount } = methodInfo;\n  if (argumentsCount !== args.length) {\n    throw new Error(\n      `Native method ${moduleName}.${methodName} expects ${argumentsCount} ${\n        argumentsCount === 1 ? 'argument' : 'arguments'\n      } but received ${args.length}`\n    );\n  }\n}\n\nconst NativeModulesProxy: { [moduleName: string]: ProxyNativeModule } = {};\n\nif (NativeProxy) {\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {\n    const turboModule = TurboModuleRegistry.get(moduleName);\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n    NativeProxy[exportedMethodsKey][moduleName].forEach((methodInfo: MethodInfo) => {\n      NativeModulesProxy[moduleName][methodInfo.name] = turboModule\n        ? async (...args: unknown[]): Promise<any> => {\n            validateMethodCall(moduleName, methodInfo, args);\n            return await turboModule.callMethod(methodInfo.name, args);\n          }\n        : async (...args: unknown[]): Promise<any> => {\n            validateMethodCall(moduleName, methodInfo, args);\n            return await NativeProxy.callMethod(moduleName, methodInfo.key, args);\n          };\n    });\n\n    // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)\n    // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.\n    //\n    // On Android only {start,stop}Observing are called on the native module\n    // and these should be exported as Expo methods.\n    NativeModulesProxy[moduleName].addListener = (...args) =>\n      NativeModules.UMReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n    NativeModulesProxy[moduleName].removeListeners = (...args) =>\n      NativeModules.UMReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n  });\n} else {\n  console.warn(\n    `The \"UMNativeModulesProxy\" native module is not exported through NativeModules; verify that @unimodules/react-native-adapter's native code is linked properly`\n  );\n}\n\nexport default NativeModulesProxy;\n"]}