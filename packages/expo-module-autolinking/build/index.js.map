{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport glob from 'fast-glob';\nimport findUp from 'find-up';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { ConsoleLogger, Logger } from './logger';\nimport {\n  AutolinkingPlatform,\n  ModuleDescriptor,\n  PackageRevision,\n  SearchOptions,\n  SearchResults,\n} from './types';\n\n/**\n * Resolves autolinking search paths. If none is provided, it accumulates all node_modules when\n * going up through the path components. This makes workspaces work out-of-the-box without any configs.\n */\nexport async function resolveSearchPathsAsync(\n  searchPaths: string[] | null,\n  cwd: string\n): Promise<string[]> {\n  return searchPaths && searchPaths.length > 0\n    ? searchPaths.map(searchPath => path.resolve(cwd, searchPath))\n    : await findDefaultPathsAsync(cwd);\n}\n\n/**\n * Finds project's package.json and returns its path.\n */\nexport async function findPackageJsonPathAsync(): Promise<string | null> {\n  return (await findUp('package.json', { cwd: process.cwd() })) ?? null;\n}\n/**\n * Looks up for workspace's `node_modules` paths.\n */\nexport async function findDefaultPathsAsync(cwd: string): Promise<string[]> {\n  const paths = [];\n  let dir = cwd;\n  let pkgJsonPath: string | undefined;\n\n  while ((pkgJsonPath = await findUp('package.json', { cwd: dir }))) {\n    dir = path.dirname(path.dirname(pkgJsonPath));\n    paths.push(path.join(pkgJsonPath, '..', 'node_modules'));\n  }\n  return paths;\n}\n\n/**\n * Searches for modules to link based on given config.\n */\nexport async function findModulesAsync(\n  platform: AutolinkingPlatform,\n  providedOptions: SearchOptions\n): Promise<SearchResults> {\n  const config = await mergeLinkingOptionsAsync(platform, providedOptions);\n  const results: SearchResults = {};\n\n  for (const searchPath of config.searchPaths) {\n    const paths = await glob('**/unimodule.json', {\n      cwd: searchPath,\n    });\n\n    for (const packageConfigPath of paths) {\n      const packagePath = fs.realpathSync(path.join(searchPath, path.dirname(packageConfigPath)));\n      const packageConfig = require(path.join(packagePath, 'unimodule.json'));\n      const { name, version } = require(path.join(packagePath, 'package.json'));\n\n      if (config.exclude?.includes(name) || !packageConfig.platforms?.includes(platform)) {\n        continue;\n      }\n\n      const currentRevision: PackageRevision = {\n        path: packagePath,\n        version,\n      };\n\n      if (!results[name]) {\n        // The revision that was found first will be the main one.\n        // An array of duplicates is needed only here.\n        results[name] = { ...currentRevision, duplicates: [] };\n      } else if (\n        results[name].path !== packagePath &&\n        results[name].duplicates?.every(({ path }) => path !== packagePath)\n      ) {\n        results[name].duplicates?.push(currentRevision);\n      }\n    }\n  }\n  return results;\n}\n\n/**\n * Merges autolinking options from different sources (the later the higher priority)\n * - options defined in package.json's `expoModules` field\n * - platform-specific options from the above (e.g. `expoModules.ios`)\n * - options provided to the CLI command\n */\nexport async function mergeLinkingOptionsAsync(\n  platform: AutolinkingPlatform,\n  providedOptions: SearchOptions\n): Promise<SearchOptions> {\n  const packageJsonPath = await findPackageJsonPathAsync();\n  const packageJson = packageJsonPath ? require(packageJsonPath) : {};\n  const baseOptions = packageJson.expo?.autolinking;\n  const platformOptions = baseOptions?.[platform];\n  const allOptions: Partial<SearchOptions>[] = [providedOptions, platformOptions, baseOptions];\n\n  function pickMergedValue<T extends keyof SearchOptions>(key: T): SearchOptions[T] | null {\n    for (const obj of allOptions) {\n      if (obj?.[key]) {\n        return obj[key]!;\n      }\n    }\n    return null;\n  }\n\n  return {\n    searchPaths: await resolveSearchPathsAsync(pickMergedValue('searchPaths'), process.cwd()),\n    ignorePaths: pickMergedValue('ignorePaths'),\n    exclude: pickMergedValue('exclude'),\n  };\n}\n\n/**\n * Verifies the search results by checking whether there are no duplicates.\n * A custom logger (e.g. non-TTY) can be provided.\n */\nexport function verifySearchResults(\n  searchResults: SearchResults,\n  logger: Logger = new ConsoleLogger()\n): number {\n  const cwd = process.cwd();\n  const relativePath: (pkg: PackageRevision) => string = pkg => path.relative(cwd, pkg.path);\n  let counter = 0;\n\n  for (const moduleName in searchResults) {\n    const revision = searchResults[moduleName];\n\n    if (revision.duplicates?.length) {\n      logger.warn(`⚠️  Found multiple revisions of ${chalk.green(moduleName)}`);\n      logger.log(` - ${chalk.magenta(relativePath(revision))} (${chalk.cyan(revision.version)})`);\n\n      for (const duplicate of revision.duplicates) {\n        logger.log(` - ${chalk.gray(relativePath(duplicate))} (${chalk.gray(duplicate.version)})`);\n      }\n      counter++;\n    }\n  }\n  if (counter > 0) {\n    logger.warn(\n      '⚠️  Please get rid of multiple revisions as it may introduce some side effects or compatibility issues'\n    );\n  }\n  return counter;\n}\n\n/**\n * Resolves search results to a list of platform-specific configuration.\n */\nexport async function resolveModulesAsync(\n  platform: string,\n  searchResults: SearchResults\n): Promise<ModuleDescriptor[]> {\n  const platformLinking = require(`./resolvers/${platform}`);\n\n  return (\n    await Promise.all(\n      Object.entries(searchResults).map(([packageName, revision]) =>\n        platformLinking.resolveModuleAsync(packageName, revision)\n      )\n    )\n  ).filter(Boolean);\n}\n"]}