{"version":3,"file":"commands.js","sourceRoot":"","sources":["../src/commands.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,0DAA+C;AAC/C,sDAA8B;AAE9B,wBAA+E;AAC/E,mDAAgD;AAGhD,wBAAwB,CAAC,QAAQ,EAAE,KAAK,EAAC,OAAO,EAAC,EAAE;IACjD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC;AAEH,wBAAwB,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE;IAC7D,MAAM,OAAO,GAAG,MAAM,sBAAmB,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACrE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,wBAAwB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE;IAC1D,MAAM,OAAO,GAAG,MAAM,sBAAmB,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACrE,MAAM,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;IAElC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAEjC,sBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAErC,OAAO,CAAC,GAAG,CACT,IAAI,CAAC,SAAS,CAAC;QACb,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAE;QACvB,OAAO;KACR,CAAC,CACH,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,wBAAwB,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE;IAC3C,MAAM,kBAAkB,GAAG,sBAAmB,CAAC,OAAO,CAAC,CAAC;IACxD,IAAI,CAAC,kBAAkB,EAAE;QACvB,gBAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;KACzC;AACH,CAAC,CAAC,CAAC;AAEH,mBAAS;KACN,OAAO,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC,OAAO,CAAC;KAChE,WAAW,CAAC,8DAA8D,CAAC;KAC3E,UAAU,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC;AAE5B;;GAEG;AACH,SAAS,wBAAwB,CAC/B,WAAmB,EACnB,EAAoD;IAEpD,OAAO,mBAAS;SACb,OAAO,CAAC,GAAG,WAAW,aAAa,CAAC;SACpC,MAAM,CACL,2BAA2B,EAC3B,0FAA0F,EAC1F,KAAK,CACN;SACA,MAAM,CACL,qCAAqC,EACrC,8CAA8C,EAC9C,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EACnD,IAAI,CACL;SACA,MAAM,CACL,4BAA4B,EAC5B,uDAAuD,EACvD,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EACnD,IAAI,CACL;SACA,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE;QACrC,MAAM,OAAO,GAAkB;YAC7B,WAAW;YACX,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB,CAAC;QACF,MAAM,aAAa,GAAG,MAAM,mBAAgB,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAExE,OAAO,MAAM,EAAE,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import chalk from 'chalk';\nimport commander, { Command } from 'commander';\nimport process from 'process';\n\nimport { findModulesAsync, resolveModulesAsync, verifySearchResults } from '.';\nimport logger, { NonTTYLogger } from './logger';\nimport { SearchOptions, SearchResults } from './types';\n\nregisterSearchingCommand('search', async results => {\n  console.log(require('util').inspect(results, false, null, true));\n});\n\nregisterSearchingCommand('resolve', async (results, command) => {\n  const modules = await resolveModulesAsync(command.platform, results);\n  console.log(modules);\n});\n\nregisterSearchingCommand('json', async (results, command) => {\n  const modules = await resolveModulesAsync(command.platform, results);\n  const logger = new NonTTYLogger();\n\n  logger.log('Using Expo modules');\n\n  verifySearchResults(results, logger);\n\n  console.log(\n    JSON.stringify({\n      logs: logger.toString(),\n      modules,\n    })\n  );\n});\n\nregisterSearchingCommand('verify', results => {\n  const numberOfDuplicates = verifySearchResults(results);\n  if (!numberOfDuplicates) {\n    logger.success('âœ… Everything is fine!');\n  }\n});\n\ncommander\n  .version(require('expo-module-autolinking/package.json').version)\n  .description('CLI command that searches for Expo modules to autolink them.')\n  .parseAsync(process.argv);\n\n/**\n * Factory for commands that need to search first and shares the same options.\n */\nfunction registerSearchingCommand(\n  commandName: string,\n  fn: (search: SearchResults, command: Command) => any\n) {\n  return commander\n    .command(`${commandName} [paths...]`)\n    .option(\n      '-p, --platform [platform]',\n      'The platform that the resulted modules must support. Available options: \"ios\", \"android\"',\n      'ios'\n    )\n    .option<string[] | null>(\n      '-i, --ignore-paths [ignorePaths...]',\n      'Paths to ignore when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value),\n      null\n    )\n    .option<string[] | null>(\n      '-e, --exclude [exclude...]',\n      'Package names to exclude when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value),\n      null\n    )\n    .action(async (searchPaths, command) => {\n      const options: SearchOptions = {\n        searchPaths,\n        ignorePaths: command.ignorePaths,\n        exclude: command.exclude,\n      };\n      const searchResults = await findModulesAsync(command.platform, options);\n\n      return await fn(searchResults, command);\n    });\n}\n"]}