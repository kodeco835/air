name: iOS Shell App

on:
  repository_dispatch:
    types: [ release-shell-ios ]
  schedule:
    - cron: '20 5 * * 2,4,6'

jobs:
  build:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}
          submodules: true
      - name: Get cache key of git lfs files
        id: git-lfs
        run: echo "::set-output name=sha256::$(git lfs ls-files | openssl dgst -sha256)"
      - uses: actions/cache@v2
        with:
          path: .git/lfs
          key: ${{ steps.git-lfs.outputs.sha256 }}
      - run: git lfs pull
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('tools-public/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install tools-public dependencies
        run: yarn install --frozen-lockfile
        working-directory: tools-public
      - run: echo "::add-path::$(pwd)/bin"
      - run: echo "::set-env name=EXPO_ROOT_DIR::$(pwd)"
      - run: expotools ios-generate-dynamic-macros
      - uses: ruby/setup-ruby@v1
      - run: echo "::set-env name=BUNDLE_BIN::$(pwd)/.direnv/bin"
      - run: echo "::add-path::$BUNDLE_BIN"
      - name: bundler cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('.ruby-version') }}-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: install fastlane
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - run: echo "--run.cwd project/tools-public" >> ~/.yarnrc
      - run: npm install gulp-cli -g
      - uses: actions/cache@v1
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Build iOS shell app for real devices
        working-directory: tools-public
        timeout-minutes: 30
        run: gulp ios-shell-app --action build --type archive --verbose true --skipRepoUpdate --shellAppSdkVersion UNVERSIONED
      - name: Build iOS shell app for simulators
        working-directory: tools-public
        timeout-minutes: 30
        run: gulp ios-shell-app --action build --type archive --verbose true --skipRepoUpdate --shellAppSdkVersion UNVERSIONED
      - run: brew install awscli
      - name: set tarball name
        id: tarball
        run: echo "::set-output name=filename::ios-shell-builder-sdk-latest-${{ github.sha }}"
      - name: Package release tarball
        if: ${{ github.event.action == 'release-shell-ios' }}
        run: |
          tar \
            -zcf "/tmp/${{ steps.tarball.outputs.filename }}" \
            package.json \
            exponent-view-template \
            shellAppBase-builds \
            shellAppWorkspaces \
            ios
      - name: upload tarball trigger
        if: ${{ github.event.action == 'release-shell-ios' }}
        timeout-minutes: 40
        run: |
          aws s3 cp --acl public-read "/tmp/${{ steps.tarball.outputs.filename }}" s3://exp-artifacts
          echo "Release tarball uploaded to s3://exp-artifacts/${{ steps.tarball.outputs.filename }}"
          echo "You can deploy this by updating or creating a new file in https://github.com/expo/turtle/tree/master/shellTarballs/ios"
          echo "Then follow the deployment instructions: https://github.com/expo/turtle-deploy"
