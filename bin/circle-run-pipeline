#! /usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'optparse'
require 'net/http'
require 'uri'

options = { open: false, body: { 'parameters' => {} } }

usage = 'Usage: circle-run-pipeline [options] BRANCH'

OptionParser.new do |parser|
  parser.banner = usage
  parser.on('-h', '--help', 'Prints this help') do
    puts parser
    exit
  end
  parser.on('-o', '--[no-]open', 'Open the pipeline page after triggering (default false)') do |o|
    options[:open] = o
  end
  parser.on('-t', '--tag TAG', 'Run pipeline on the specified tag') do |t|
    options[:body]['tag'] = t
  end
  parser.on('-g', '--google-play', 'Run google play release build job') do
    options[:body]['parameters']['release'] = true
    options[:body]['parameters']['release_google'] = true
  end
  parser.on('-k', '--apk', 'Run android apk release build job') do
    options[:body]['parameters']['release'] = true
    options[:body]['parameters']['release_apk'] = true
  end
  parser.on('-s', '--simulator', 'Run simulator release build job') do
    options[:body]['parameters']['release'] = true
    options[:body]['parameters']['release_simulator'] = true
  end
  parser.on('-i', '--ios-shell-app', 'Run ios shell app build job') do
    options[:body]['parameters']['release'] = true
    options[:body]['parameters']['shell_ios'] = true
  end
  parser.on('-a', '--android-shell-app', 'Run android shell app build job') do
    options[:body]['parameters']['release'] = true
    options[:body]['parameters']['shell_android'] = true
  end
  parser.on('-e', '--expo-client', 'Run expo client build job') do
    options[:body]['parameters']['release'] = true
    options[:body]['parameters']['expo_client'] = true
  end
end.parse!

unless options[:body]['tag']
  if ARGV.empty?
    puts usage
    exit 1
  end
  options[:body]['branch'] = ARGV[0]
end

uri = URI('https://circleci.com/api/v2/project/github/expo/expo/pipeline')

res = Net::HTTP.post uri, options[:body].to_json, {
  'Circle-Token': ENV.fetch('CIRCLE_TOKEN'),
  'Content-Type' => 'application/json',
  'Accept' => 'application/json',
  'x-attribution-actor-id' => 'circle-run-pipeline'
}

res.value # raise exception unless the result was successful

if options[:open]
  pipelines = 'https://app.circleci.com/pipelines/github/expo/expo'
  pipelines += "?branch=#{options[:body]['branch']}" if options[:body]['branch']

  `open #{pipelines}`
end
