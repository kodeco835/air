#! /usr/bin/env bash

set -eou pipefail

# arguments
PROJECT_SLUG=${1}
# split second parameter at '/'
WORKFLOW_NAME=${2/\/*/}
JOB_NAME=${2/*\//}
BRANCH=${3:-master}

# required tools
command -v curl &> /dev/null
command -v jq &> /dev/null

if [[ "${CIRCLE_TOKEN:-absent}" == "absent" ]]; then
  >&2 echo "Environment variable CIRCLE_TOKEN is required."
  exit 0
fi

circleCurl() {
  curl --fail -Ss -X GET \
    -H 'Accept: application/json' \
    -H "Circle-Token: $CIRCLE_TOKEN" \
    "$@"
}

PIPELINES=$(circleCurl --data-urlencode "branch=${BRANCH}" "https://circleci.com/api/v2/project/${PROJECT_SLUG}/pipeline" | jq '.items')

LAST_SUCCESSFUL_PIPELINE_ID=

for pipeline_id in $(jq -r '.[].id' <<< "${PIPELINES}"); do
  workflow_id=$(circleCurl "https://circleci.com/api/v2/pipeline/${pipeline_id}/workflow" | jq -r ".items | .[] | select(.name == \"${WORKFLOW_NAME}\" and .status != \"not_run\") | .id")
  if [[ "${workflow_id}" != '' ]]; then
    successful_job=$(circleCurl "https://circleci.com/api/v2/workflow/${workflow_id}/job" | jq -r ".items | .[] | select(.name == \"${JOB_NAME}\" and .status == \"success\")")
    if [[ "${successful_job}" != '' ]]; then
      LAST_SUCCESSFUL_PIPELINE_ID=$pipeline_id
      break
    fi
  fi
done

jq -r ".[] | select(.id == \"${LAST_SUCCESSFUL_PIPELINE_ID}\") | .vcs.revision " <<< "${PIPELINES}"
